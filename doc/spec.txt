== 設計方針 ==
長時間安定して稼働できるようにする.
Boxnyaと外部(ネットワーク, ファイルシステム)との通信は, プラグイン形式で拡張できるようにする.

== 構成 ==
・system : 2スレッド
・input : n
・output : n

systemには, masterとloggerの2つのスレッドが存在する.
masterが各プラグインを管理する.
1つのinput/outputごとに1つのスレッドを割り当て, masterが起動する.
また, サブスレッドで例外が発生し, 処理が中断されたら直ちにmasterが再起動を試みる.

= 動作 =
* 安定状態
inputがwhileループ内で外部から情報を取得し, それをoutputに投げる.
inputは, 得られた情報をmessageの形式に落としこんで, キューを使って別スレッドに投げる.
inputは, 各outputのイベントオブジェクトを持っている.
outputでは, whileループでキューの状態を監視するが, キューが空になった時点でスリープに入るものとする.
そして, inputはoutputが寝ているならば, イベントオブジェクトを通じてoutputを起, キューを処理させる.
* ログ
全てのモジュールは, 決められたログ形式のオブジェクトを作って, loggerスレッドのキューに投げるものとする. これもoutputと同様にイベントオブジェクトでスリープにする.
* 例外処理
各プラグインで例外が発生した場合には, エラーメッセージ等を決められたエラー形式のオブジェクトに突っ込んで, masterスレッドのキューに投げる. 各プラグインがキューとイベントオブジェクトを持つのは上記と同様.

== クラスの継承関係 ==

threading.ThreadのサブクラスMyThreadに, 基本的な機能を実装する.
これを継承して, inputとoutputを作る.
また, inputとoutputを多重継承したinoutを定義して, フィルターとして機能できるようにする.
masterとloggerはinoutつまりフィルターのサブクラスである.
    MyThread
  /         \
Input       Output
   \        /
     InOut
    /     \
master    logger

= MyThread =
Loggerを呼び出すメソッド, 設定を書き換えるためのメソッド等を定義

= Input =
配送先のOutputキュー, イベントをリストで持っている.
メッセージを投げるメソッドを提供.
メイン処理のためのメソッドを定義し, それをオーバーライドしてもらう.

= Output =
キュー, イベントオブジェクトをもつ.
メッセージを投げるためのメソッドをもつ. これをオーバーライド.

= master =
プラグイン群のリスト, in-outマトリクス, 設定をもつ.
プラグインの設定更新メソッドを定義.

= logger =
ログを出力するためのメソッドを持つ.
全てのモジュールリストを持つ.

== 内部の通信 ==
基本的にはin->out. inoutはinでもあり, outでもある.
in->inout(キューに溜める.処理をして,outlistに投げる)->out
log,masterは特殊なスレッドとして, どのスレッドからでもメッセージを投げられる.
(というか, 基底クラスに, log, masterを呼び出すメソッドをつくる.)
・configer
config-inputを将来的に実装する.
config-inputからmasterへシステムメッセージを投げる.
= メッセージ =
text:"文字列"
from:"inputの名前"
icon:画像

= ログ =
text
from
level

= システム =
text
from

= conf =
pythonのconfig parser使います.
デーモン:True/False # 常にTrueで良い気がしてきた.
log:path
if daemon:
    run-user
    pid
input - output list

= その他 =
各スレッドのwhileループ内の条件は, 共有変数のboolean:roopあたりを使う.
つまり, もしユーザが終了を命じたらroopをFalseにしてwhileループから抜ける.
inputとoutputは名前がつけられるので, 辞書に格納する.
旧boxnyaはtwitter APIとメインの処理に分離.
できるだけ外部ライブラリ依存は減らしたい.
今のところはPython 2.xを想定, 2.6から2.7くらいまで.