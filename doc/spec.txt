== 設計方針 ==
長時間安定して稼働できるようにする.
Boxnyaと外部(ネットワーク, ファイルシステム)との通信は, プラグイン形式で拡張できるようにする.

== 構成 ==
・master
・input
・output
に分ける.

masterが各プラグインを管理する.
1つのinputごとに1つのスレッドを割り当て, masterが起動する.
また, サブスレッドで例外が発生し, 処理が中断されたら直ちにmasterが再起動を試みる.
masterロガーと, outputとしてのロガーは分離する.
outputは, 全てのoutputで1つのスレッドにする. (重かったら他の方法を考える)
inputとoutputは, 拡張できるようにする.
-> intputとoutputの雛形クラスを作り, それを継承してもらう形に.
-> output(master)へメッセージを渡す処理は, 雛形クラスのメソッドをオーバーライドして利用してもらう.
(inputはスレッドになるので, 雛形もthreading.Threadのサブクラスになる)
設定ファイルはyamlを廃止して, pythonモジュールにする.
-> pythonで直接importできる.

== 処理の流れ ==
= 全体 =
1. masterが起動.
2. 設定ファイルの読み込み.
3. inputとoutputをインスタンス化し, それぞれリストに格納する.
4. inputリストをforで回して全て起動.
5. masterはwhileループに入って, inputからの例外が来るか待ち続ける.

= メッセージの流れ =
1. inputがネットワーク等から情報を取ってくる.
2. masterのメソッドにメッセージを渡して呼び出す.
3. masterのメソッドが, outputリストにメッセージを渡す.

= メッセージの形式 =
text:文字列
from:inputの名前
icon:画像
(to:どのoutputに渡すか) 実装するか検討中.

= conf =
/settings.py
デーモン:True/False # 常にTrueで良い気がしてきた.
error log:path
log:path
if daemon:
    run-user
    pid
inputのconfもまとめるならば,各モジュールの設定をここに.
confディレクトリに, input-1,input-2,output-1...の方が良いかも.

= その他 =
inputとoutputは名前がつけられるので, 辞書に格納すると思う.
旧boxnyaはtwitter APIとメインの処理に分離.
できるだけ外部ライブラリ依存は減らしたい.
今のところはPython 2.xを想定, 2.6から2.7くらいまで.
logは基本的にエラーのみ.