__all__ = [ os.path.basename(f)[:-3] for f in glob.glob(os.path.dirname(__file__)+"/*.py")]
input/__init__.pyに↑を書くと, inputフォルダにpythonモジュールを入れるだけで読み込めるようになる.

上の__init__と組み合わせて,以下の方法で, 一般的にモジュールを読み込める.
>>> import hoge
>>> dir(hoge)
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__', 'f', 'glob', 'os', 'thr']
>>> name = hoge.__all__[1]
>>> name
'thr'
>>> mod = __import__("hoge."+name,fromlist=["hoge"])
>>> mod
<module 'hoge.thr' from 'hoge/thr.pyc'>
TODO:これをさらに抽象化し, {name:mod}なモジュールリストを返す関数を作る.


こっちの方がよいかも.
>>> import sys
>>> name = 'foo.bar.baz'
>>> __import__(name)
<module 'foo' from >
>>> baz = sys.modules[name]
>>> baz
<module 'foo.bar.baz' from >


できた.

__init__.py
import glob, os
__all__ = [ os.path.basename(f)[:-3] for f in glob.glob(os.path.dirname(__file__)+"/*.py")]

core.py
import sys
def get_module_dict(dirname):
    name_list = __import__(dirname).__all__
    name_list.remove('__init__')
    for name in name_list:
        __import__('.'.join((dirname,name)))
    return dict(zip(name_list,[sys.modules['.'.join((dirname,name))] for name in name_list]))
